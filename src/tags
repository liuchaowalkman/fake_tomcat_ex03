!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	HttpResponse.h	13;"	d
BUFFER_SIZE	Response.h	13;"	d
CONSTANTS_H_	Constants.h	3;"	d
Constants	Constants.cpp	/^Constants::Constants(){$/;"	f	class:Constants
Constants	Constants.h	/^ class Constants{$/;"	c
DEBUG_PRINTER_H_	DebugPrinter.h	2;"	d
DEBUG_PRINTER_PRINT_LN	DebugPrinter.h	8;"	d
DebugPrinter	DebugPrinter.h	/^class DebugPrinter{$/;"	c
FDREAD_H_	FdRead.h	3;"	d
FD_WRITE_H_	FdWrite.h	3;"	d
FdRead	FdRead.cpp	/^FdRead::FdRead (int fd){$/;"	f	class:FdRead
FdRead	FdRead.h	/^class FdRead{$/;"	c
FdWrite	FdWrite.cpp	/^FdWrite::FdWrite(int fd){$/;"	f	class:FdWrite
FdWrite	FdWrite.h	/^class FdWrite{$/;"	c
HTTPCONNECTOR_H_	HttpProcessor.h	5;"	d
HTTPCONNETOR_H_	HttpConnector.h	3;"	d
HTTPREQUESTLINE_H_	HttpRequestLine.h	4;"	d
HTTP_REQUEST_H_	HttpRequest.h	3;"	d
HTTP_RESPONSE_H_	HttpResponse.h	2;"	d
HttpConnector	HttpConnector.cpp	/^HttpConnector::HttpConnector(const char* cScheme ) : scheme(cScheme), stopped(false){$/;"	f	class:HttpConnector
HttpConnector	HttpConnector.cpp	/^HttpConnector::HttpConnector(string str ) : scheme(str), stopped(false){$/;"	f	class:HttpConnector
HttpConnector	HttpConnector.h	/^class HttpConnector : public Thread{$/;"	c
HttpProcessor	HttpProcessor.cpp	/^HttpProcessor::HttpProcessor(HttpConnector* connector): pResponse(NULL), pRequest(NULL){$/;"	f	class:HttpProcessor
HttpProcessor	HttpProcessor.h	/^class HttpProcessor{$/;"	c
HttpRequest	HttpRequest.h	/^class HttpRequest{$/;"	c
HttpRequestLine	HttpRequestLine.h	/^class HttpRequestLine{$/;"	c
HttpResponse	HttpResponse.cpp	/^HttpResponse::HttpResponse(int fd): fdWrite(fd){$/;"	f	class:HttpResponse
HttpResponse	HttpResponse.h	/^class HttpResponse{$/;"	c
LOG_BUF_SIZE	DebugPrinter.cpp	12;"	d	file:
MAX_FILE_LEN	Constants.h	11;"	d
MAX_FILE_LEN	Response.h	14;"	d
OBJS	makefile	/^OBJS        := $(SRCS:.cpp=.o)  $/;"	m
OBJS_DIR	makefile	/^OBJS_DIR    :=..\/obj$/;"	m
OBJS_fullpath	makefile	/^OBJS_fullpath := $(addprefix $(OBJS_DIR)\/, $(OBJS))$/;"	m
REQUEST_H_	Request.h	2;"	d
RESPONSE_H_	Response.h	2;"	d
Request	Request.cpp	/^Request::Request(int fd){$/;"	f	class:Request
Request	Request.h	/^class Request{$/;"	c
Response	Response.cpp	/^Response::Response(int fd){$/;"	f	class:Response
Response	Response.h	/^class Response{$/;"	c
SERVLETPROCESSOR_H_	ServletProcessor.h	2;"	d
SERVLET_H_	Servlet.h	2;"	d
SRC_DIR	makefile	/^SRC_DIR    :=.$/;"	m
STATICRESOURCEPROCESSOR_H_	StaticResourceProcessor.h	2;"	d
Servlet	Servlet.h	/^class Servlet{$/;"	c
ServletProcessor	ServletProcessor.h	/^class ServletProcessor{$/;"	c
StaticResourceProcessor	StaticResourceProcessor.h	/^class StaticResourceProcessor{$/;"	c
THREAD_H_	Thread.h	3;"	d
Thread	Thread.cpp	/^Thread::Thread() : $/;"	f	class:Thread
Thread	Thread.h	/^class Thread{$/;"	c
_threadLoop	Thread.cpp	/^void* Thread::_threadLoop(void* user){$/;"	f	class:Thread
conFd	Request.h	/^    private: int conFd;$/;"	m	class:Request
conFd	Response.h	/^        int conFd;$/;"	m	class:Response
connector	HttpProcessor.h	/^            HttpConnector* connector;$/;"	m	class:HttpProcessor
destroy	Constants.cpp	/^void Constants::destroy(){$/;"	f	class:Constants
fdWrite	HttpResponse.h	/^        FdWrite fdWrite;$/;"	m	class:HttpResponse
getMethod	HttpRequest.cpp	/^string HttpRequest::getMethod(){$/;"	f	class:HttpRequest
getProtocol	HttpRequest.cpp	/^string HttpRequest::getProtocol(){$/;"	f	class:HttpRequest
getScheme	HttpConnector.cpp	/^string HttpConnector::getScheme(){$/;"	f	class:HttpConnector
getUri	HttpRequest.cpp	/^string HttpRequest::getUri(){$/;"	f	class:HttpRequest
getUri	Request.cpp	/^string Request::getUri(){$/;"	f	class:Request
getWriter	Response.cpp	/^int Response::getWriter(){$/;"	f	class:Response
httpRequestLine	HttpProcessor.h	/^            HttpRequestLine  httpRequestLine;$/;"	m	class:HttpProcessor
httpRequestLine	HttpRequest.h	/^        HttpRequestLine httpRequestLine;$/;"	m	class:HttpRequest
init	Constants.cpp	/^void Constants::init(){$/;"	f	class:Constants
input	FdRead.h	/^        int input;$/;"	m	class:FdRead
mExitPending	Thread.h	/^        bool mExitPending;$/;"	m	class:Thread
mRunning	Thread.h	/^        bool mRunning;$/;"	m	class:Thread
mThread	Thread.h	/^        pthread_t mThread;$/;"	m	class:Thread
main	main.cpp	/^int main(){$/;"	f
method	HttpRequestLine.h	/^        string method;$/;"	m	class:HttpRequestLine
output	FdWrite.h	/^        int output;$/;"	m	class:FdWrite
pRequest	HttpProcessor.h	/^            HttpRequest *pRequest;$/;"	m	class:HttpProcessor
pRequest	HttpResponse.h	/^        HttpRequest *pRequest;$/;"	m	class:HttpResponse
pRequest	Response.h	/^        Request * pRequest;$/;"	m	class:Response
pResponse	HttpProcessor.h	/^            HttpResponse *pResponse;$/;"	m	class:HttpProcessor
parse	Request.cpp	/^void Request::parse(){$/;"	f	class:Request
parseUri	Request.cpp	/^void Request:: parseUri(string strHttpReq){$/;"	f	class:Request
print	DebugPrinter.h	/^        DebugPrinter& print(T val){$/;"	f	class:DebugPrinter
println	DebugPrinter.cpp	/^void DebugPrinter::println(const char* tag, const char* fmt,  ...){$/;"	f	class:DebugPrinter
process	HttpProcessor.cpp	/^void HttpProcessor::process(int fd){$/;"	f	class:HttpProcessor
process	ServletProcessor.cpp	/^void ServletProcessor::process(HttpRequest* request, HttpResponse* response){$/;"	f	class:ServletProcessor
process	StaticResourceProcessor.cpp	/^void StaticResourceProcessor::process(HttpRequest* request, HttpResponse* response){$/;"	f	class:StaticResourceProcessor
protocol	HttpRequestLine.h	/^        string protocol;$/;"	m	class:HttpRequestLine
readAllString	FdRead.cpp	/^string FdRead::readAllString(){$/;"	f	class:FdRead
readData	FdRead.cpp	/^int FdRead::readData(char* buf, int maxSize){$/;"	f	class:FdRead
readRequestLine	HttpProcessor.cpp	/^void HttpProcessor::readRequestLine(){$/;"	f	class:HttpProcessor
run	Thread.cpp	/^int Thread::run(){$/;"	f	class:Thread
scheme	HttpConnector.h	/^        string scheme;$/;"	m	class:HttpConnector
self	Constants.cpp	/^Constants* Constants::self = NULL;$/;"	m	class:Constants	file:
self	Constants.h	/^        static Constants* self;$/;"	m	class:Constants
sendStaticResource	HttpResponse.cpp	/^void HttpResponse::sendStaticResource(){$/;"	f	class:HttpResponse
sendStaticResource	Response.cpp	/^void Response::sendStaticResource(){$/;"	f	class:Response
setMethod	HttpRequest.cpp	/^void HttpRequest::setMethod(string method){$/;"	f	class:HttpRequest
setProtocol	HttpRequest.cpp	/^void HttpRequest::setProtocol(string protocol){$/;"	f	class:HttpRequest
setRequest	HttpResponse.cpp	/^void HttpResponse::setRequest(HttpRequest* req){$/;"	f	class:HttpResponse
setRequest	Response.cpp	/^void Response::setRequest(Request* req){$/;"	f	class:Response
setThreadName	Thread.cpp	/^void Thread::setThreadName(char* threadName){$/;"	f	class:Thread
setUri	HttpRequest.cpp	/^void HttpRequest::setUri(string uri){$/;"	f	class:HttpRequest
start	Thread.cpp	/^void Thread::start(){$/;"	f	class:Thread
stopped	HttpConnector.h	/^        bool stopped;$/;"	m	class:HttpConnector
strRequest	HttpProcessor.h	/^            string strRequest;$/;"	m	class:HttpProcessor
strTag	DebugPrinter.h	/^        string strTag;$/;"	m	class:DebugPrinter
target	makefile	/^target:=$(target_dir)\/main.exe$/;"	m
target_dir	makefile	/^target_dir:=..\/bin$/;"	m
threadLoop	HttpConnector.cpp	/^bool HttpConnector::threadLoop(){$/;"	f	class:HttpConnector
threadPrepare	Thread.cpp	/^int Thread::threadPrepare(){$/;"	f	class:Thread
uri	HttpRequestLine.h	/^        string uri;$/;"	m	class:HttpRequestLine
uri	Request.h	/^             string uri;$/;"	m	class:Request
webRoot	Constants.h	/^        static  string webRoot;$/;"	m	class:Constants
write	FdWrite.cpp	/^void FdWrite::write(char* outBuf, int maxSize){$/;"	f	class:FdWrite
write	FdWrite.cpp	/^void FdWrite::write(string outStr){$/;"	f	class:FdWrite
write	HttpResponse.cpp	/^void HttpResponse::write(string str){$/;"	f	class:HttpResponse
~HttpConnector	HttpConnector.cpp	/^HttpConnector::~HttpConnector(){$/;"	f	class:HttpConnector
~HttpResponse	HttpResponse.cpp	/^HttpResponse::~HttpResponse(){$/;"	f	class:HttpResponse
~Request	Request.cpp	/^Request::~Request(){$/;"	f	class:Request
~Response	Response.cpp	/^Response::~Response(){$/;"	f	class:Response
~Thread	Thread.cpp	/^Thread::~Thread(){ $/;"	f	class:Thread
