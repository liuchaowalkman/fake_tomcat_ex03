/*************************************************************************
    > File Name: httpServer.cpp
    > Author: chaoliu    
    > Mail: chaoliu@marvell.com 
    > Created Time: Wed Sep 24 12:16:31 2014
 ************************************************************************/

#include <iostream>
#include <string>
#include <stdio.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <string.h>

using namespace std;


class HttpServer{
    #define MAX_FILE_LEN 80

	public:  static string webRoot; 
             static bool webRootGot;
	private: static const string SHUTDOWN_COMMAND ;
			 bool shutdown ;
			 
	public:  HttpServer();
			 ~HttpServer();
			 
			 void await();
};

const string HttpServer::SHUTDOWN_COMMAND("/SHUTDOWN");
bool HttpServer::webRootGot = false;

string HttpServer::webRoot("./");

HttpServer::HttpServer():shutdown(false){
    if(!webRootGot){
        char path[MAX_FILE_LEN];
        getcwd(path,MAX_FILE_LEN);
        cout << "web_root:" << path << endl;
        webRoot = path;
    }
}


HttpServer::~HttpServer(){

}

void HttpServer::await(){

    struct sockaddr_in  serverAddr;
    int listenFd ;
    int const port = 8080;
    int const maxConCount = 1;

    listenFd =  socket(AF_INET, SOCK_STREAM, 0);
    bzero(&serverAddr, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    //serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serverAddr.sin_addr.s_addr = inet_addr("0.0.0.0");
    serverAddr.sin_port = htons(port);

    int recode = bind(listenFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
    

    listen(listenFd, maxConCount);
    while(!shutdown){
        struct sockaddr_in clientAddr;
        int conFd;
        socklen_t clientLen = sizeof(clientAddr);

        conFd = accept(listenFd, (struct sockaddr*)&clientAddr, &clientLen);
        
        cout << "conFd = " << conFd << endl;
        int n = 0;
        char buf[2048];
        n = read(conFd, buf, 2048 );
        cout << buf << endl;
        cout << "---------------------------------------" << endl;

        close(conFd);
    }
        
}








int main(){
    
    HttpServer mHttpServer;
    mHttpServer.await();
	
	
	
	return 0;
}






